@model jmsmanutencao.ModelsViews.AddAdminViewModel

@{
    ViewBag.Title = "Adicionar novo Administrador";
}

<!DOCTYPE html>
<html>
<head>
    <title>Adicionar novo Administrador</title>
    <link href="~/css/AddAdmin.css" rel="stylesheet" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Fredoka:wght@300..700&display=swap" rel="stylesheet">
</head>
<body>
    <div class="area">
        <ul class="locks">
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
        </ul>
        <!-- conteúdo da página -->
        <div class="login-container row">
            <div class="col-lg-6 left-section d-none d-lg-block">
                <div class="left-section-custom content-left">
                    <div>
                        <h1>Adicionar novo Administrador...</h1>
                        <p style="color:#F2B705">JMS Manutenções</p>
                    </div>
                    <div class="left-section-img">
                        <img src="/images/LOGO JMS.png" alt="Logo" class="login-image-custom" />
                    </div>
                </div>
            </div>
            <div class="login-card-custom col-lg-6 col-md-12 right-section">
                <div class="card-title">
                    <h2>Cadastro de Administrador</h2>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("AddAdmin", "Administrator", FormMethod.Post))
                    {
                        <div class="form-group">
                            @Html.LabelFor(m => m.UserEmail, new { @class = "form-label" })
                            @Html.TextBoxFor(m => m.UserEmail, new { @class = "form-control-custom", placeholder = "Digite o email..." })
                            @Html.ValidationMessageFor(m => m.UserEmail, "", new { @class = "text-danger-custom" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.Password, new { @class = "form-label" })
                            <div class="password-container">
                                <input type="password" id="password" name="Password" class="form-control-custom" placeholder="Digite a senha..." />
                                <span id="togglePassword" class="eye-icon" style="cursor: pointer;">
                                    <i class="fas fa-eye"></i>
                                </span>
                            </div>
                            @Html.ValidationMessageFor(m => m.Password, "", new { @class = "text-danger-custom" })
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.ConfirmPassword, new { @class = "form-label" })
                            <div class="password-container">
                                <input type="password" id="confirmPassword" name="ConfirmPassword" class="form-control-custom" placeholder="Confirme a senha..." />
                                <span id="toggleConfirmPassword" class="eye-icon" style="cursor: pointer;">
                                    <i class="fas fa-eye"></i>
                                </span>
                            </div>
                            @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "text-danger-custom" })
                        </div>


                        <!-- Altera a Visibilidade da Senha -->
                        <script>
                            document.getElementById('togglePassword').addEventListener('click', function () {
                                const passwordInput = document.getElementById('password');
                                const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                                passwordInput.setAttribute('type', type);
                                this.querySelector('i').classList.toggle('fa-eye-slash'); // Muda o ícone ao clicar
                            });

                            document.getElementById('toggleConfirmPassword').addEventListener('click', function () {
                                const passwordInput = document.getElementById('confirmPassword');
                                const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                                passwordInput.setAttribute('type', type);
                                this.querySelector('i').classList.toggle('fa-eye-slash'); // Muda o ícone ao clicar
                            });
                        </script>

                        <div class="login-error">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger-custom" })
                        </div>

                        <div class="form-group text-center">
                            <button type="submit" class="btn btn-custom w-100">Cadastrar</button>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
                    {
                        <div class="alert alert-danger mt-3 text-center">@ViewBag.ErrorMessage</div>
                    }
                </div>
            </div>
        </div>
    </div>
</body>
</html>
